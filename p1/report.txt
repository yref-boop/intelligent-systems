PROBLEM: a NxN magic square is a matrix that containss the numbers between 1 and NxN 
arranged so that the sum of the elements of each row, or colum or diagonals, is always:
\frac{N(NxN+1)}{2}

Formalize the problem so that it can be solved using search strategies
Use simple actions that only change a single cell of the square

INITIAL STATE:
    {aa,ba,ca,da,....,na}
    {. .                }
    {.     .            }
    {.        .         }
    {.            .     }
    {a.............., nn}
    
    a matrix of integers, represented in our case as a list of integers of size n*n
    {0,1,...,n-1,n,n+1,...n*n}

SET OF ACTIONS:
    Add number (x) to position (y,z)

    VALUES:
        x -> x is a number [1,n*n]
        (y,z) -> used in reality as an int [0,n*n-1]

        there is a total of (n*n)*(n*n) possible actions to be applied to an state

    PRECONDITIONS:
        the previous number on position x is not 0  
        the number x is not bigger than n*n
        and is not repeated

TRANSITION MODEL:
    The action will change the value on the list from 0 to the wanted value

GOAL TEST:
    Implementation of the given properties:
    Sum of columns & sum of rows & sum of diagonal == wanted number


BREADTH FIRST VS DEPTH FIRST:
    Expectation: Depth first seems to be the one more optimized for solving this problem, since it will change values at different positions quicker
    Reality: depending on the case, both seem to be relatively similar, with an slight improvement on Depth first

HEURISTICS:
    repetivity:
        checks that no numbers are repeated
    zeros:
        checks the number of current zeroes on the state
    odd (auxiliar):
        checks if an state represents an odd or even matrix
    getCornerSum:
        returns the values on the corners
    oddCentral:
        returns the central values on an odd matrix
    evenCentral:
        returns the central values on an even matrix
    corners:
        checks how close the current values on the corners are from the expected
    goal:
        checks how different are the values from those expected of a magicSquareMatrix
    cross:
        checks the values on cross of a matrix
    frame:
        checks the values on frame of a matrix
    the rest are implementations of the specifics of goals heuristic

    having all of these heuritics, by testing, we reached to the conclusion that our informed search would be guided by:
    
        repetivity(s)*2+axis(s)+corners(s)/10


EXERCISE 2C MODIFICATION:
    
    Our code is not able to solve the third example in a reasonable time, thus an attempt to optimize it has been made:
    
    Heuristics:
    The previous heuristics have been optimized and the ones used changed, in order to guide the decision-making, the current 
        
    Actions:
    Some actions returned states which would not make sense(repeated numbers, trying to change an already changed value...) the file MagicSquareProblem hass been modified to not allow this behaviour
    Depth First & Breadth First: the code has been simplified and optimized without major chhanges on the working of the algorithm*
    ASearch: no major changes have been made here

    Yet, the code is still unable to solve the proposed problem on a reasonable time
*the only major change is that now the initial node is added to the 
frontier, and inmediately erased after entering the loop, before checking isGoal
